{"version":3,"sources":["components/header/index.tsx","components/modal/howToCreateToggle/index.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/Flagship-horizontal-product-white.png"],"names":["Header","Navbar","className","fixed","Brand","href","alt","src","Logo","Nav","Link","Form","inline","HowToCreateToggleModal","useState","show","setShow","handleClose","Button","variant","onClick","Modal","onHide","size","closeButton","Title","Body","target","rel","style","cursor","Image","fluid","marginRight","marginLeft","Footer","App","fsVisitor","setFsVisitor","customBtnData","setCustomBtnData","useEffect","visitorInstance","flagship","start","fetchNow","enableConsoleLogs","newVisitor","screenMode","on","data","getModifications","key","defaultValue","Container","Row","Col","md","id","Alert","minHeight","Heading","height","margin","display","codeString","color","backgroundColor","borderColor","sendHits","type","category","action","JSON","stringify","fetchedModifications","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.45ba39c8.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav, Form } from 'react-bootstrap';\nimport Logo from '../../assets/Flagship-horizontal-product-white.png';\n\nconst Header: React.FC = () => (\n  <>\n    <Navbar className=\"fsNavbar\" fixed=\"top\">\n      <Navbar.Brand\n        href=\"https://github.com/abtasty/flagship-js-sdk\"\n        className=\"flex item-center\"\n      >\n        <img\n          alt=\"Logo Flagship\"\n          src={Logo}\n          className=\"d-inline-block align-top logoAdjust\"\n        />\n        JS SDK with React\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"#initialization\">Initialization</Nav.Link>\n        <Nav.Link href=\"#modifications\">Modifications</Nav.Link>\n        <Nav.Link href=\"#hits\">Hits</Nav.Link>\n        <Nav.Link href=\"#unit-tests\">Unit tests</Nav.Link>\n        <Nav.Link href=\"#other\">Other</Nav.Link>\n      </Nav>\n\n      <Form inline>\n        <Nav.Link href=\"https://github.com/abtasty/flagship-js-sdk\">\n          Github\n        </Nav.Link>\n        <Nav.Link href=\"https://www.abtasty.com/solutions-product-teams/\">\n          What is Flagship ?\n        </Nav.Link>\n      </Form>\n    </Navbar>\n  </>\n);\nexport default Header;\n","import React, { useState } from 'react';\nimport { Button, Modal, Image } from 'react-bootstrap';\n\nconst HowToCreateToggleModal: React.FC = () => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"light\" onClick={handleShow}>\n        More info here 😉\n      </Button>\n\n      <Modal show={show} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Create a use case on Flagship Dashboard</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h5>1 - Sign in on Flagship</h5>\n          <p>\n            {' '}\n            <a\n              href=\"https://app.flagship.io/login\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              👉 Click here to log in\n            </a>\n          </p>\n          <h5 className=\"pt3\">2 - Click on \"+\" button</h5>\n          <a\n            href=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-30-28.png\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ cursor: 'zoom-in' }}\n          >\n            <Image\n              src=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-30-28.png\"\n              fluid\n            />\n          </a>\n          <h5 className=\"pt3\">3 - Select or create a new project</h5>\n          <a\n            href=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-33-43.png\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ cursor: 'zoom-in' }}\n          >\n            <Image\n              src=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-33-43.png\"\n              fluid\n            />\n          </a>\n          <h5 className=\"pt3\">4 - Name your project (if creating a new one)</h5>\n          <a\n            href=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-34-22.png\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ cursor: 'zoom-in' }}\n          >\n            <Image\n              src=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-34-22.png\"\n              fluid\n            />\n          </a>\n          <h5 className=\"pt3\">5 - Choose a use case</h5>\n          <a\n            href=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-36-11.png\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ cursor: 'zoom-in' }}\n          >\n            <Image\n              src=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-36-11.png\"\n              fluid\n            />\n          </a>\n          <h5 className=\"pt3\">6 - Fill use case's basic info</h5>\n          <a\n            href=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-38-13.png\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ cursor: 'zoom-in' }}\n          >\n            <Image\n              src=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-38-13.png\"\n              fluid\n            />\n          </a>\n          <h5 className=\"pt3\">7 - Define use case's flag and scenarios</h5>\n          <a\n            href=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-39-34.png\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ cursor: 'zoom-in' }}\n          >\n            <Image\n              src=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-39-34.png\"\n              fluid\n            />\n          </a>\n          <h5 className=\"pt3\">8 - Define use case's targeting</h5>\n          <a\n            href=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-40-21.png\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ cursor: 'zoom-in' }}\n          >\n            <Image\n              src=\"https://storage.googleapis.com/flagship-dev-public-storage/Screenshot%20at%20Dec%2004%2016-40-21.png\"\n              fluid\n            />\n          </a>\n          <h2 className=\"pt4 tc\">All done 👏👏</h2>\n          <Image\n            className=\"db\"\n            style={{ marginRight: 'auto', marginLeft: 'auto' }}\n            src=\"https://media.giphy.com/media/XreQmk7ETCak0/giphy.gif\"\n            fluid\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            <div className=\"mh3\">Ok</div>\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default HowToCreateToggleModal;\n","/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable max-len */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport flagship, { IFlagshipVisitor, EventHit } from '@flagship.io/js-sdk';\nimport CodeBlock from '@tenon-io/tenon-codeblock';\nimport React, { useEffect, useState } from 'react';\nimport { Alert, Button, Col, Container, Row } from 'react-bootstrap';\nimport './App.css';\nimport Header from './components/header';\nimport HowToCreateToggleModal from './components/modal/howToCreateToggle';\n\nconst App: React.FC = () => {\n    const [fsVisitor, setFsVisitor] = useState<IFlagshipVisitor | null>(null);\n    const [customBtnData, setCustomBtnData] = useState<{ [key: string]: string }>({});\n    useEffect(() => {\n        const fsSdk = flagship.start('bn1ab7m56qolupi5sa0g', 'j2jL0rzlgVaODLw2Cl4JC3f4MflKrMgIaQOENv36', {\n            fetchNow: true,\n            enableConsoleLogs: true\n        });\n        const visitorInstance: IFlagshipVisitor = fsSdk.newVisitor('test-perf', {\n            screenMode: 'light'\n        });\n        visitorInstance.on('ready', () => {\n            setFsVisitor(visitorInstance);\n        });\n    }, []);\n    useEffect(() => {\n        if (fsVisitor) {\n            const data = fsVisitor.getModifications(\n                [\n                    {\n                        key: 'color',\n                        defaultValue: '#fff'\n                    },\n                    {\n                        key: 'borderColor',\n                        defaultValue: '#007bff'\n                    },\n                    {\n                        key: 'backgroundColor',\n                        defaultValue: '#007bff'\n                    }\n                ],\n                true\n            );\n            setCustomBtnData(data as { [key: string]: string });\n        }\n    }, [fsVisitor]);\n    return (\n        <>\n            <Header />\n            <Container className=\"mt3\">\n                <Row>\n                    <Col md={12}>\n                        <a className=\"fsAnchor\" id=\"initialization\" />\n                        <Alert variant=\"dark\" className=\"fs-alert\" style={{ minHeight: '30vh' }}>\n                            <Alert.Heading>⚠️ Important ! ⚠️</Alert.Heading>\n                            <p>\n                                The React SDK is now available. <a href=\"https://github.com/abtasty/flagship-react-sdk\">Have a look !</a>\n                            </p>\n                            <p>Below, you will see an example using SDK JS, not SDK REACT. Be aware of that. :)</p>\n                            <img\n                                alt=\"down\"\n                                style={{\n                                    height: '30vh',\n                                    margin: '0 auto',\n                                    display: 'block'\n                                }}\n                                src=\"https://cdn.clipart.email/79d1b885dd08966ac10421c9251a0d43_upside-down-arrow-clip-art-at-clkercom-vector-clip-art-online-_800-933.svg\"\n                            />\n                        </Alert>\n                    </Col>\n\n                    <Col>\n                        <a className=\"fsAnchor\" id=\"initialization\" />\n                        <Alert variant=\"dark\" className=\"fs-alert\">\n                            <Alert.Heading>Initialization 🔌🕹</Alert.Heading>\n                            <p>In your React component, create first a state hook for your visitor:</p>\n                            <CodeBlock className=\"mv3\" codeString=\"const [fsVisitor, setFsVisitor] = useState(null);\" />\n                            <p>Then initialize everything, using an effect hook:</p>\n                            <CodeBlock\n                                className=\"mv3\"\n                                codeString={`useEffect(() => {\n  const fsSdk = flagship.start('bn1ab7m56qolupi5sa0g', 'j2jL0rzlgVaODLw2Cl4JC3f4MflKrMgIaQOENv36', { fetchNow: true, enableConsoleLogs: true });\n\n  const visitorInstance = fsSdk.newVisitor('test-perf', {\n    screenMode: 'light',\n  });\n\n  visitorInstance.on('ready', () => {\n    setFsVisitor(visitorInstance);\n  });\n}, []);`}\n                            />\n                            <Alert variant=\"info\" className=\"fs-alert\">\n                                <b>NOTE:</b> You can check logs generated using your browser inspect tools :)\n                            </Alert>\n                        </Alert>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <a className=\"fsAnchor\" id=\"modifications\" />\n                        <Alert variant=\"dark\" className=\"fs-alert\">\n                            <Alert.Heading>Get customized modifications 🎬</Alert.Heading>\n                            <Alert variant=\"info\" className=\"fs-alert\">\n                                <Alert.Heading>Prerequisite:</Alert.Heading>\n                                <p>Make sure to create a use case on Flagship Dashboard first</p>\n                                <HowToCreateToggleModal />\n                            </Alert>\n                            <p>\n                                Considering you want to customize a \"add to basket\" button which actually in your code looks similar to\n                                this:\n                            </p>\n                            <CodeBlock\n                                className=\"mv3\"\n                                codeString={'<Button variant=\"primary\" className=\"mb3\">Add to basket  🛒</Button>'}\n                            />\n                            <p>\n                                <b>Output:</b>\n                            </p>\n                            <Button variant=\"primary\" className=\"mb3\">\n                                Add to basket 🛒\n                            </Button>\n                            <p>\n                                Black friday event is coming, so you're looking to access modifications in order to put specific style to\n                                this button using Flagship.\n                                <br />\n                                Here an example of how to get customized modifications and apply it to the button\n                            </p>\n                            <p>1 - Add state hook</p>\n                            <CodeBlock\n                                className=\"mv3\"\n                                codeString={'const [customBtnData, setCustomBtnData] = useState<{[key: string]: string}>({});'}\n                            />\n                            <p>2 - Initialized it with getModifications function</p>\n                            <CodeBlock\n                                className=\"mv3\"\n                                codeString={`useEffect(\n  () => {\n    if (fsVisitor) {\n      const data = fsVisitor.getModifications([\n        {\n          key: 'color',\n          defaultValue: '#fff',\n        },\n        {\n          key: 'borderColor',\n          defaultValue: '#007bff',\n        },\n        {\n          key: 'backgroundColor',\n          defaultValue: '#007bff',\n        },\n      ], true)\n      setCustomBtnData(data as {[key: string]: string})\n    }\n  }, [fsVisitor],\n);`}\n                            />\n                            <p>3 - Plug it</p>\n                            <CodeBlock\n                                className=\"mv3\"\n                                codeString={`<Button\n  variant=\"primary\"\n  className=\"mb3\"\n  style={\n    {\n      color: customBtnData.color,\n      backgroundColor: customBtnData.backgroundColor,\n      borderColor: customBtnData.borderColor,\n    }\n  }\n>\n  Add to basket  🛒\n</Button>`}\n                            />\n                            <p>\n                                <b>Output:</b>\n                            </p>\n                            <Button\n                                variant=\"primary\"\n                                className=\"mb3\"\n                                style={{\n                                    color: customBtnData.color,\n                                    backgroundColor: customBtnData.backgroundColor,\n                                    borderColor: customBtnData.borderColor\n                                }}\n                            >\n                                Add to basket 🛒\n                            </Button>\n                        </Alert>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <a className=\"fsAnchor\" id=\"hits\" />\n                        <Alert variant=\"dark\" className=\"fs-alert\">\n                            <Alert.Heading>Send some tracking info 📬</Alert.Heading>\n                            <p>\n                                Continuing the previous example (Customized black friday add to basket button), let's add a hit when the\n                                user click on the button.\n                                <br />\n                                The hit will be type of <b>event</b>\n                            </p>\n                            <CodeBlock\n                                className=\"mv3\"\n                                codeString={`<Button\n  {...}\n  onClick={(): void => {\n    if (fsVisitor) {\n      const eventPayload: EventHit = {\n        category: 'Action Tracking',\n        action: 'clickOnBasketButton',\n      };\n      fsVisitor.sendHits([\n        {\n          type: 'Event',\n          data: eventPayload,\n        },\n      ]);\n    }\n  }}\n  style={...}\n>\n  Add to basket  🛒\n</Button>`}\n                            />\n                            <p>\n                                <b>Output:</b>\n                            </p>\n                            <Button\n                                variant=\"primary\"\n                                className=\"mb3\"\n                                onClick={(): void => {\n                                    if (fsVisitor) {\n                                        const eventPayload: EventHit = {\n                                            category: 'Action Tracking',\n                                            action: 'clickOnBasketButton'\n                                        };\n                                        fsVisitor.sendHits([\n                                            {\n                                                type: 'Event',\n                                                data: eventPayload\n                                            }\n                                        ]);\n                                    }\n                                }}\n                                style={{\n                                    color: customBtnData.color,\n                                    backgroundColor: customBtnData.backgroundColor,\n                                    borderColor: customBtnData.borderColor\n                                }}\n                            >\n                                Add to basket 🛒\n                            </Button>\n                            <Alert variant=\"info\" className=\"fs-alert\">\n                                <b>NOTE:</b> You can check API call using your browser inspect tools (network section) :)\n                            </Alert>\n                        </Alert>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <a className=\"fsAnchor\" id=\"unit-tests\" />\n                        <Alert variant=\"dark\" className=\"fs-alert\">\n                            <Alert.Heading>Unit tests 📋✅</Alert.Heading>\n                            You might have to mock the Flagship SDK in your tests.\n                            <br />\n                            Considering you're using jest:\n                            <CodeBlock\n                                className=\"mv3\"\n                                codeString={`\nimport flagship from '@flagship.io/js-sdk';\nimport { EventEmitter } from 'events';\n\nflagship.start = jest.fn().mockImplementation(() => ({\n  newVisitor: () => {\n    const self = new EventEmitter();\n    return self;\n  },\n}));\n                  `}\n                            />\n                            <Alert variant=\"info\" className=\"fs-alert\">\n                                <b>NOTE:</b> This sample can be adjust according your needs.\n                            </Alert>\n                            <Alert variant=\"info\" className=\"fs-alert\">\n                                <b>NOTE2:</b> Have a look to <b>App.test.tsx</b> for a complete overview.\n                            </Alert>\n                        </Alert>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <a className=\"fsAnchor\" id=\"other\" />\n                        <Alert variant=\"dark\" className=\"fs-alert\">\n                            <Alert.Heading>Some additional info ‍📑</Alert.Heading>\n                            <p>\n                                Once the SDK is initialized and a fetched of modifications has been done (fetchNow=true, getModifications()\n                                called), you can have access to the fetched data like so:\n                            </p>\n                            <CodeBlock\n                                className=\"mv3\"\n                                codeString={`\n  const fsModificationsInCache = fsVisitor.fetchedModifications;\n  console.log(fsModificationsInCache);\n                  `}\n                            />\n                            <p>Which gives something like: </p>\n                            {fsVisitor !== null && (\n                                <CodeBlock\n                                    className=\"mv3\"\n                                    codeString={fsVisitor !== null && JSON.stringify(fsVisitor.fetchedModifications, null, 1)}\n                                />\n                            )}\n                        </Alert>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Flagship-horizontal-product-white.6e8b90f3.png\";"],"sourceRoot":""}